_ = require('underscore')._
util = require 'util'

class SidePot
  constructor: (@amount, @members) ->

  update_counter: (key, amount) ->
    @ensure_member(key)
    @members[key] += amount

  total: ->
    sum = 0
    for key, value of @members
      sum += value
    sum

  is_member: (player) ->
    _.include _.keys(@members), player

  add_member: (player) ->
    @members[player] = 0

  ensure_member: (player) ->
    @add_member(player) unless @is_member(player)

  add_bet: (player, amount) ->
    bet = @members[player] ? 0
    all_in = @amount
    if all_in > @amount
      delta = all_in - bet
      if delta > 0
        @update_counter(player, all_in)
      	return amount - delta
      else
        return amount
    else
      return 0

class Pot
  constructor: ->
    @current = new SidePot(0, [])
    @active = []
    @inactive = []

  side_pots: ->
    pots = @active.concat(@inactive)
    pots.push(@current)
    _.select pots, (pot) -> pot.members.length > 0 and pot.total() > 0

  total: ->
    sum = 0
    for pot in @side_pots()
      sum += pot.total()
    sum

  add_bet: (player, amount, is_all_in) ->
    r = @allocate_bet(player, amount)
    active = r[0]
    unallocated = r[1]
    if is_all_in
      @split(player, unallocated)
    else
      @current.add_bet(player, unallocated)

  remove_member: (player) ->

  allocate_bet: (player, amount) ->
    u = 0
    for pot in @side_pots()
      u = pot.add_bet(player, amount)
    return [@active, u]

  split: (player, amount) ->
    r = @split_pot(player, amount)
    old_pot = r[0]
    new_pot = r[1]
    @active.push old_pot
    @current = new_pot

  split_pot: (player, amount) ->
    side_pot = @current
    side_pot.update_counter(player, amount)
    members = side_pot.members
    bet = members[player]
    list = side_pot.members
    list1 = _.select _.keys(list), (m) -> m != player and members[m] > bet
    list2 = _.reduce list1, ((m, n) -> m[n] = members[n] - bet; m ), {}
    new_pot = new SidePot(0, list2)
    members2 = _.reduce _.keys(list), ((m, n) ->
      m[n] = if members[n] > bet
        bet
      else
        members[n]
      m
    ), {}
    old_pot = new SidePot(bet, members2)
    [old_pot, new_pot]

exports.Pot = Pot

